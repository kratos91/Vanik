Here is a comprehensive prompt articulating our entire discussion, designed to be given to an AI agent for designing and developing your Inventory Management System:

**Prompt for AI Agent: Design & Development of an Inventory Management System**

**Objective:** Design and develop a low-budget, open-source Inventory Management System (IMS) with a web interface and an Android mobile application for a trading business dealing in natural and man-made yarns and fibers. The primary goal is to address existing pain points (stockouts, overstocking, inaccurate counts, slow order fulfillment, poor tracking, wasted time) and improve efficiency, reporting, customer satisfaction, and support business growth.

**1. Business Context & Scale:**
* **Industry:** Trading of natural and man-made yarns and fibers.
* **Products:** Physical goods (natural yarns, man-made yarns, plastic packaging sheets).
* **Inventory Volume:** Currently deals in Lakhs of KGs per month; individual ticket sizes typically above 10,000 KGs.
* **Locations:** Manages inventory across approximately 3-4 warehouses within the same city.
* **Current Method:** A mix of spreadsheets and manual ledgers.
* **Growth Projections (3-5 Years):** 25% increase in inventory volume per year, 1-2 new locations per year, 1-2 new users per year.

**2. Key Pain Points to Address:**
* Stockouts and overstocking.
* Inaccurate inventory counts.
* Slow order fulfillment.
* Difficulty tracking returns.
* Wasted time due to manual processes.
* Difficulty tracking specific stocks.
* Challenges with multiple SKUs for one category/multiple categories/various sizes for each SKU.

**3. Prioritized Modules & Functionalities (MVP within 1 Month):**

**P1 - Minimum Viable Product (MVP) - (Target: 4 Weeks Development)**
* **Product & SKU Master:**
    * Define product categories (e.g., Yarn, Fiber, Packaging).
    * Define SKUs (Stock Keeping Units) with attributes like name, `product_id`, `sku_code` (unique, auto-generated), description, `base_unit` (default 'KG').
    * Manage HSN codes at the product category level.
    * CRUD operations for products and SKUs via web UI (Admin access).
* **Warehouse Management:**
    * Define and manage warehouse locations (name, address, contact details).
    * CRUD operations for locations via web UI.
* **Inventory Operations (Goods Receipt Note - GRN):**
    * Record incoming inventory via GRN (number, date, supplier, remarks).
    * GRN items: SKU, received quantity (KG), optional batch/lot number, size, color, purchase rate per KG.
    * Automatic update of `inventory_lots` (create new lot or update existing) and record transactions in `inventory_transactions`.
    * GRN entry forms available on both Web and Android App.
* **Sales Order Management:**
    * Create sales orders (number, date, type: 'Customer Sale' or 'WIP Outflow', customer/processor, status, expected delivery date).
    * Sales order items: SKU, ordered quantity (KG), sales rate per KG (for customer sales).
    * Manage `customers` and `processors` master data.
* **Sales Challan Management:**
    * Generate challans for goods dispatched (number, date, linked sales order, dispatch location, vehicle details, driver details).
    * Challan items: linked sales order item, SKU, dispatched quantity (KG), specific `inventory_lot_id` from which stock is taken.
    * **Logic:** For 'Customer Sale' Challans: Deduct from `inventory_lots` and record 'SALES_OUT' transaction. For 'WIP Outflow' Challans: Record 'WIP_SENT' transaction only (no inventory deduction at this stage). Update `fulfilled_quantity_kg` on `sales_order_items`.
    * Sales Challan generation available on both Web and Android App.
* **Processing/WIP Management (WIP Inflow):**
    * Record processed goods returning from processors (inflow number, date, processor, receipt location, linked sales order).
    * WIP Inflow items: original outflow SKU/quantity, received SKU/quantity, batch/lot, size, color, actual purchase rate (derived), calculated weight loss.
    * Add received quantity to `inventory_lots` and record 'WIP_RECEIVED' transaction.
    * WIP Inflow entry forms available on both Web and Android App.
* **Reporting:**
    * **Basic Real-time Stock Levels Report:** Display current quantity per SKU, per warehouse, overall; distinguish between physical stock and items at processors (WIP Out).
    * **Basic WIP Report:** Show items currently at processors (quantity sent vs. quantity received back).
* **User Management (Authentication & Authorization):**
    * Secure User Login (username/password).
    * Role-Based Access Control (RBAC).
    * **Roles:** Admin (full access, user management), Stock Manager (GRN, Sales Challan, WIP In/Out, Stock Reports, Master Data - limited), Data Entry Operator (GRN, Sales Challans, WIP Inflows).
    * API endpoints for login/logout and user/role management (Admin only).

**P2 - High Priority (Post-MVP):**
* Stock Transfer between warehouses.
* Stock Adjustments (damage, loss, etc.).
* Physical Inventory Count/Audits.
* Detailed Purchase Order Management (linking to GRN, vendor management).
* Integration with "Busy" accounting software.
* Mobile app enhancements (barcode scanning, notifications).

**P3 - Desirable (Future Enhancements):**
* Returns Management.
* Multi-stage WIP processing.
* Advanced Reporting & Analytics (e.g., aging reports, profitability reports).
* Demand forecasting.
* Warehouse layout/bin management.

**4. Detailed Technical Design Specifications:**

**4.1 Database Schema (PostgreSQL with Logical Distribution):**
* **`core` Schema:**
    * `roles`: `id`, `name` (unique), `description`, `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
    * `users`: `id`, `username` (unique), `password_hash`, `email` (unique), `full_name`, `role_id` (FK to `core.roles`), `is_active`, `last_login_at`, `created_by`, `created_at`, `updated_by`, `updated_at`.
    * `locations`: `id`, `name` (unique), `address`, `contact_person`, `phone`, `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
* **`master_data` Schema:**
    * `products`: `id`, `name` (unique), `hsn_code`, `description`, `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
    * `skus`: `id`, `name`, `product_id` (FK to `master_data.products`), `sku_code` (unique), `description`, `base_unit` (`VARCHAR(50)` default 'KG'), `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
    * `suppliers`: `id`, `name` (unique), `contact_person`, `phone`, `email`, `address`, `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
    * `customers`: `id`, `name` (unique), `contact_person`, `phone`, `email`, `address`, `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
    * `processors`: `id`, `name` (unique), `contact_person`, `phone`, `email`, `address`, `processing_type`, `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
* **`inventory` Schema:**
    * `inventory_lots`: `id`, `sku_id` (FK to `master_data.skus`), `location_id` (FK to `core.locations`), `batch_or_lot_number`, `size`, `color`, `purchase_rate_per_kg` (`DECIMAL(18,2)`), `current_quantity_kg` (`DECIMAL(18,2)`), `received_date`, `supplier_id` (FK to `master_data.suppliers`), `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
        * **Unique Constraint:** `(sku_id, location_id, batch_or_lot_number, size, color, purchase_rate_per_kg)`
    * `goods_receipts`: `id`, `grn_number` (unique), `receipt_date`, `supplier_id` (FK to `master_data.suppliers`), `remarks`, `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
    * `goods_receipt_items`: `id`, `grn_id` (FK to `inventory.goods_receipts`), `sku_id` (FK to `master_data.skus`), `received_quantity_kg` (`DECIMAL(18,2)`), `batch_or_lot_number`, `size`, `color`, `purchase_rate_per_kg` (`DECIMAL(18,2)`), `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
    * `inventory_transactions`: `id`, `transaction_type` (`VARCHAR(50)` with `CHECK` constraints for ENUM values like 'GRN_IN', 'SALES_OUT', 'WIP_SENT', 'WIP_RECEIVED', etc.), `sku_id` (FK to `master_data.skus`), `inventory_lot_id` (FK to `inventory.inventory_lots`, nullable), `location_id` (FK to `core.locations`), `quantity_change_kg` (`DECIMAL(18,2)`), `transaction_date`, `reference_doc_id` (`UUID`), `reference_doc_type` (`VARCHAR(50)` with `CHECK` constraints for 'GoodsReceipt', 'SalesChallan', etc.), `remarks`, `created_by`, `created_at`.
* **`sales` Schema:**
    * `sales_orders`: `id`, `order_number` (unique), `order_date`, `order_type` (`VARCHAR(50)` with `CHECK` for 'Customer Sale', 'WIP Outflow'), `customer_id` (FK to `master_data.customers`, nullable), `processor_id` (FK to `master_data.processors`, nullable), `status` (`VARCHAR(50)` with `CHECK` for 'New', 'Pending Fulfillment', 'Fulfilled', 'Cancelled'), `expected_delivery_date`, `remarks`, `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
    * `sales_order_items`: `id`, `sales_order_id` (FK to `sales.sales_orders`), `sku_id` (FK to `master_data.skus`), `ordered_quantity_kg` (`DECIMAL(18,2)`), `sales_rate_per_kg` (`DECIMAL(18,2)`, nullable), `fulfilled_quantity_kg` (`DECIMAL(18,2)`), `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
    * `sales_challans`: `id`, `challan_number` (unique), `challan_date`, `sales_order_id` (FK to `sales.sales_orders`), `dispatch_location_id` (FK to `core.locations`), `vehicle_type`, `driver_name`, `driver_mobile_number`, `remarks`, `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
    * `sales_challan_items`: `id`, `sales_challan_id` (FK to `sales.sales_challans`), `sales_order_item_id` (FK to `sales.sales_order_items`), `sku_id` (FK to `master_data.skus`), `dispatched_quantity_kg` (`DECIMAL(18,2)`), `inventory_lot_id` (FK to `inventory.inventory_lots`), `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
* **`wip` Schema:**
    * `wip_inflows`: `id`, `wip_inflow_number` (unique), `inflow_date`, `processor_id` (FK to `master_data.processors`), `receipt_location_id` (FK to `core.locations`), `sales_order_id` (FK to `sales.sales_orders`), `remarks`, `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
    * `wip_inflow_items`: `id`, `wip_inflow_id` (FK to `wip.wip_inflows`), `original_outflow_sku_id` (FK to `master_data.skus`), `original_outflow_quantity_kg` (`DECIMAL(18,2)`), `received_sku_id` (FK to `master_data.skus`), `received_quantity_kg` (`DECIMAL(18,2)`), `batch_or_lot_number`, `size`, `color`, `actual_purchase_rate_per_kg` (`DECIMAL(18,2)`, nullable), `calculated_weight_loss_kg` (`DECIMAL(18,2)`), `is_active`, `created_by`, `created_at`, `updated_by`, `updated_at`.
* **Auditing Fields:** All tables include `created_by` (FK to `core.users`), `created_at` (`TIMESTAMP WITH TIME ZONE`), `updated_by` (FK to `core.users`), `updated_at` (`TIMESTAMP WITH TIME ZONE`).

**4.2 API Endpoints (High-Level RESTful):**
* `/api/auth/login`, `/api/auth/logout`, `/api/auth/me`
* `/api/users`, `/api/users/{id}` (Admin only)
* `/api/products`, `/api/skus`
* `/api/locations`
* `/api/suppliers`, `/api/customers`, `/api/processors`
* `/api/grns`, `/api/grns/{id}`
* `/api/sales_orders`, `/api/sales_orders/{id}`
* `/api/sales_challans`, `/api/sales_challans/{id}`
* `/api/wip_inflows`, `/api/wip_inflows/{id}`
* `/api/reports/stock_levels`, `/api/reports/wip_status`

**4.3 Mobile App Specifics (Android):**
* **Primary Tasks:** Input individual inventory item details (GRN), view total stock, create sales challans, input WIP Inflow details.
* **Connectivity:** Both offline and online capabilities required. Robust synchronization mechanism needed.

**5. Technical Stack & Architecture:**
* **Architecture:** Client-Server Architecture with clear separation.
* **Frontend (Web):** React or Vue.js (Framework), Vite/Webpack (Build Tool), Tailwind CSS / Chakra UI / Material-UI (Styling).
* **Frontend (Android Mobile):** React Native or Flutter (Framework), SQLite/Realm/WatermelonDB (Local Database for Offline).
* **Backend (API Server):** Python with Django REST Framework or FastAPI (Language & Framework), JWT (Authentication), Docker (Containerization, optional for MVP).
* **Database:** PostgreSQL (Relational Database).
* **Deployment:** Cloud Providers (AWS, GCP, DigitalOcean - prioritize low-cost options).

**6. Development Plan (Aggressive MVP within 4 Weeks):**
* **Week 1: Setup & Master Data Core**
    * Infrastructure provisioning, repo setup, boilerplate.
    * User Management: DB schemas, login APIs, JWT/RBAC, basic login UI (Web/Android).
    * Master Data (Partial): DB schemas, basic CRUD APIs for `products`, `skus`, `locations`, `suppliers`, `customers`, `processors`; basic Web UI for entry/viewing.
* **Week 2: Inventory Inflow (GRN) & Core UI Integration**
    * Warehouse Management: Refine APIs/UI.
    * GRN Module: DB schemas, APIs, `inventory_lots` update logic.
    * Web/Android UI for GRN entry (with offline).
* **Week 3: Inventory Outflow (Sales & WIP Challans)**
    * Sales Order Management: DB schemas, APIs, Web UI.
    * Sales Challan Management: DB schemas, APIs (deducting inventory, tracking WIP out).
    * Web/Android UI for Sales Challan generation (with offline).
* **Week 4: WIP Inflow, Reporting & Final Polish**
    * WIP Inflow Module: DB schemas, APIs (adding processed goods to inventory).
    * Web/Android UI for WIP Inflow entry (with offline).
    * Reporting: APIs for `stock_levels` and `wip_status`, Web UI for reports.
    * User Management (Completion): Admin UI for user/role management.
    * Basic end-to-end testing, deployment preparation, and initial deployment.

**7. Constraints & Preferences:**
* **Budget:** Low budget, prioritize open-source libraries and tools.
* **Timeline:** MVP within one month.
* **Integration:** Future integration with "Busy" accounting software.
* **Security:** Strong password hashing, secure authentication.

**AI Agent's Task:**
Given the above comprehensive requirements, technical specifications, and development plan, design the detailed system architecture, select specific technologies within the proposed stack, and generate the necessary code (including backend APIs, database interactions, frontend components for web and mobile, and deployment scripts) to build and deploy the MVP as per the 4-week timeline. Provide step-by-step implementation guidance for a developer.

